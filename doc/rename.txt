*rename.txt*				Variable rename plugin for neovim.

Version: 0.3
Author: Qiming Zhao <chemzqm at gmail.com>
License: MIT license

CONTENTS					*rename-contents*

Introduction		|rename-introduction|
Install			|rename-install|
Usage			|rename-usage|
Interface		|rename-interface|
  Variables		  |rename-variables|
    g:rename_start_key      	|g:rename_start_key|
    g:rename_toggle_key     	|g:rename_toggle_key|
    g:rename_next_key       	|g:rename_next_key|
    g:rename_prev_key       	|g:rename_prev_key|
    g:rename_begin_key      	|g:rename_begin_key|
    g:rename_end_key        	|g:rename_end_key|
    g:rename_search_execute 	|g:rename_search_execute|
    g:rename_search_vcs_root	|g:rename_search_vcs_root|
    g:rename_search_winpos  	|g:rename_search_winpos|
    g:rename_search_extra_args  |g:rename_search_extra_args|
    g:rename_spinner_type   	|g:rename_spinner_type|
  Functions		  |rename-functions|
Search 			|rename-search|
  Search commands	  |rename-search-commands|
  Search arguments    	  |rename-search-args|
  Search keymap 	  |rename-search-keymap|
Faq			|rename-faq|
Changelog		|rename-changelog|

==============================================================================
INTRODUCTION					*rename-introduction*

*rename.nvim* is a node plugin of neovim that makes rename variable easy.

It make use of |buffer-updates| of neovim to make it really fast.

It doesn't use any of 'Cursor' or 'TextChange' event of vim.

==============================================================================
INSTALL						*rename-install*

Install [nodejs](http://nodejs.org/) version > 8.0, and run command: >

  npm install -g neovim
<
to install neovim node client globally.

Install plugin by plugin manager, like https://github.com/Shougo/dein.vim by add: >

  call dein#add('neoclide/rename.nvim', {
      \ 'build': 'npm install --only=production'
      \})
<

to your `init.vim` and run: >

  :call dein#install()
<

in neovim.

When using other plugin manager, you may need to run: >

  npm install --only=production

in the directory of this plugin and run >

  :UpdateRemotePlugins
>
in neovim and restart neovim to make remote plugin works.

==============================================================================
USAGE						*rename-usage*

1. Press <C-a> or <C-d> in normal mode active rename.
2. Optional use |n| |N| |o| |O| to actived words.
3. Optional use <C-d> to toggle word activation.
4. Change the word (all modes of vim are supported).
5. Press <esc> or save/leave buffer or insert none keyword to exit.

For project wide replace check out |:RenameSearch|

==============================================================================
INTERFACE					*rename-interface*

------------------------------------------------------------------------------
VARIABLES 					*rename-variables*

g:rename_start_key                            	*g:rename_start_key*
			Trigger key for start rename with all same words in
			current buffer actived.

			Default: <C-a>


g:rename_toggle_key                            	*g:rename_toggle_key*
			Trigger key for toggle variable under cursor.
			also used for start rename with current word actived.

			Default: <C-d>


g:rename_next_key                            	*g:rename_next_key*
			Goto and active next same word.

			Default: 'n'

g:rename_prev_key                            	*g:rename_prev_key*
			Goto and active previous word.
			
			Default: 'N'

g:rename_begin_key                            	*g:rename_begin_key*
			Goto first actived word.
			
			Default: 'o'

g:rename_end_key                            	*g:rename_end_key*
			Goto last actived word.
			
			Default: 'O'

g:rename_hl_guifg                            	*g:rename_hl_guifg*
			Foreground color for actived word.

			Default: 'white'

g:rename_hl_guibg                            	*g:rename_hl_guibg*
			Background color for actived word.
			
			Default: 'magenta'

g:rename_search_execute 			*g:rename_search_execute*
			The executable command used for rename search, could be
			'ag', 'rg' or absolute path to ag/rg.  Rename would
			detect which command to use, 'rg' would be prefered than
			'ag'

			Default: ''

g:rename_search_vcs_root 			*g:rename_search_vcs_root*
			Whether use vsc root as CWD for search when possible,
			set value to 0 or v:false to disable.

			Default: 1

g:rename_search_winpos 				*g:rename_search_winpos*
			Window position for search result, could be 'left'
			'top' 'right' 'bottom'

			Default: 'left'

g:rename_search_extra_args 			*g:rename_search_extra_args*
			Extra arguments that would be prepend to search
			arguments. ex: >

			let g:rename_search_extra_args = ['-A', 2, '-B', 3]
<
			Default: ['-C', 3]

g:rename_spinner_type 				*g:rename_spinner_type*
			Spinner type for search loading. checkout file
			`lib/util/spinners.js` for available options.

			Default: 'bouncingBar'


==============================================================================
FUNCTIONS 					*rename-functions*

RenameSearchAction({name}, {arg}) 		*RenameSearchAction*
			Do action for rename search buffer.
			Action could be 'open' or 'move'.

			When action is 'open', arg is the command for open the
			buffer, for example `tabe` `split`.

			When action is 'move', arg could be 'prev' and 'next'
			for move to previous match and next match.
			

						*health#rename#check()*
health#rename#check()
	    Run health check.

==============================================================================
SEARCH 						*rename-search*

Project search is provided for rename variables project wide.

RenameSearch only support 'ag' and 'ripgrep', 'ripgrep' is preferred, check out

https://github.com/BurntSushi/ripgrep#installation for installation.

------------------------------------------------------------------------------
	 					*rename-search-commands*

:RenameSearch {args}  				*:RenameSearch*
		Start async searching with |rename-search-args|, ex: 
>
		" search for fixed string
		:RenameSearch foo.bar

		" search with regex
		:RenameSearch -e r\w+me
>
< 		Use |rename-search-replace| for replace current word project
		wide.

:RenameSearchStop[!]  				*:RenameSearchStop*

		Stop search process by send "SIGHUP", when '!' is used, send
		"SIGKILL" instead.

------------------------------------------------------------------------------
						*rename-search-args*

Search arguments can be used to get better results.

Note: <tab> could be used for full name args completion.

'-A', '-after'  				*rename-args-a*

  How many lines after the matching line will be printed.
  '-A' is an alias for '-after'. >

    :ReanmeSearch -A 10 foo

'-B', '-before' 				*rename-args-b*

  How many lines before the matching line will be printed.
>
    :ReanmeSearch -B 10 foo

'-C', '-context' 				*rename-args-c*

  Defines how many lines around the matching line will be printed.
>
    :ReanmeSearch -C 10 foo

'-S', '-smartcase' 				*rename-args-s*

  Use smart case for search.


'-i', '-ignorecase'  				*rename-args-i*

  Make this search be case-insensitive.
>
	:RenameSearch -i foo

'-t', '-extension' 				*rename-args-t*

  Files extension for search.
>
	" search only ts files
	:ReanmeSearch -t ts foo
<
  Note: this option could be used multiply times.

'-l', '-literal'                                 *rename-args-l*

  Use pattern as literal string.

  Note: Unlike how 'ag' and 'rg' works in command line,
  this is default behaviour, use '-e' option for regex search.

'-w', '-word' 				 	*rename-args-w*

  Only match whole words.

'-e', '-regex' 				 	*rename-args-e*

  Use pattern as regular expression, could be used multiply times.
>
 	:RenameSearch -e foo.*

'-u', '-skip-vcs-ignores' 		 	*rename-args-u*

  Ignore VCS ignore files (.gitignore, .hgignore), but still use .ignore.

------------------------------------------------------------------------------
						*rename-search-keymap*

Default keymaps for search buffer:

	<C-c> 		Stop search process.
	<q> 		Exit and delete search buffer.
	<CR> 		Open file under cursor in current buffer.
	<C-n>		Goto next match.
	<C-p>		Goto previous match.

You can create your own keymap by using |RenameSearchStart| autocmd.


						*rename-search-replace*
Keymap for repalce current word project wide:

	<Plug>(rename-search-replace)

For example, you can add: >

	nmap <leader>sr <Plug>(rename-search-replace)
>
in your init.vim.

==============================================================================
FAQ						*rename-faq*

Q: How could I force the RenameSearch process stop?

A: You can use command ":RenameSearchStop!" to send 'SIGKILL'.

------------------------------------------------------------------------------

Q: How could I make RenameSearch always use vim's working directory?

A: `let g:rename_search_vcs_root = 0`

------------------------------------------------------------------------------

Q: How could I configure RenameSearch buffer?

A: You can use autocmd 'RenameSearchStart' like: >

	autocmd User RenameSearchStart :call s:SetupRename()

	function s:SetupRename()
	  setl nowrap | setl nonu | setl nornu
	  nnoremap <buffer> s :call RenameSearchAction('open', 'split')<CR>
  	  nnoremap <buffer> t :call RenameSearchAction('open', 'tabe')<CR>
  	  nnoremap <buffer> p :call RenameSearchAction('open', 'pedit')<CR>
	endfunction


==============================================================================
CHANGELOG					*rename-changelog*

May 30, 2018 - 0.1

	First release.

Jun 01, 2018 - 0.2

	Support project search.

Jun 04, 2018 - 0.3

	Support change file on save.

==============================================================================
vim:tw=78:nosta:ts=8:sts=0:ft=help:noet:fen:fdm=marker:
